// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package mysql

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :execresult

INSERT INTO escape.orders (
    order_source,
    loyalty_member_id,
    order_status,
    updated
)
VALUES (?, ?, ?, ?)
`

type CreateOrderParams struct {
	OrderSource     int32        `json:"order_source"`
	LoyaltyMemberID string       `json:"loyalty_member_id"`
	OrderStatus     int32        `json:"order_status"`
	Updated         sql.NullTime `json:"updated"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOrder,
		arg.OrderSource,
		arg.LoyaltyMemberID,
		arg.OrderStatus,
		arg.Updated,
	)
}

const getAll = `-- name: GetAll :many

SELECT
    id,
    order_source,
    loyalty_member_id,
    order_status,
    updated
FROM escape.orders
`

func (q *Queries) GetAll(ctx context.Context) ([]EscapeOrder, error) {
	rows, err := q.db.QueryContext(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EscapeOrder
	for rows.Next() {
		var i EscapeOrder
		if err := rows.Scan(
			&i.ID,
			&i.OrderSource,
			&i.LoyaltyMemberID,
			&i.OrderStatus,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
